---

- name: Execute on initialize hook
  include_tasks: "{{ app.value.on_initialize_hook }}"
  when: app.value.on_initialize_hook is defined

- name: Set persistent environment variables
  lineinfile: path=/etc/environment regexp="^{{ item.key }}=" line="{{ item.key }}=\"{{ item.value }}\""
  with_dict: "{{ app.value.persistent_environment|default({}) }}"

- name: Get the app's files through Git
  git:
    repo: "{{ app.value.repo }}"
    dest: "{{ app.value.path }}"
    version: "{{ app.value.version|default('master') }}"
    accept_hostkey: true
    ssh_opts: "-o StrictHostKeyChecking=no"
    update: no

- name: Install the app's files created from templates
  template: src={{ item.src }} dest={{ item.dest }} mode={{ item.mode|default("0644") }}
  with_items: "{{ app.value.templates }}"
  when: app.value.templates is defined

- block:
    - name: Set permissions for the web user and app's owner on the app's writable resources
      acl:
        path: "{{ app.value.path }}/{{ item[0] }}"
        etype: user
        entity: "{{ item[1] }}"
        permissions: rwx
        default: "{{ item[2] }}"
        recursive: yes
        state: present
      with_nested:
        - "{{ app.value.writable_resources }}"
        - ["{{ app.value.web_user|default('www-data') }}", "{{ app.value.owner|default('vagrant') }}"]
        - [yes, no]

    - name: Set permissions masks on the app's writable resources
      acl:
        path: "{{ app.value.path }}/{{ item }}"
        etype: mask
        permissions: rwx
        default: yes
        recursive: yes
        state: present
      with_items: "{{ app.value.writable_resources }}"

  when: app.value.writable_resources is defined

- name: Do composer install
  composer: no_dev=false working_dir={{ app.value.path }}
  environment: "{{ app.value.environment|default({}) }}"
  when: app.value.composer|default(false)

- name: Do npm install
  npm: path={{ app.value.path }}
  environment: "{{ app.value.environment|default({}) }}"
  when: app.value.npm|default(false)

- name: Do yarn install
  shell: yarn install --non-interactive --silent
    chdir: "{{ app.value.path }}"
  environment: "{{ app.value.environment|default({}) }}"
  when: app.value.yarn|default(false)

- name: Execute on finalize hook
  include_tasks: "{{ app.value.on_finalize_hook }}"
  when: app.value.on_finalize_hook is defined

- name: Change the app's owner
  file:
    path: "{{ app.value.path }}"
    owner: "{{ app.value.owner|default('vagrant') }}"
    group: "{{ app.value.group|default('vagrant') }}"
    recurse: yes

- name: Execute post finalize hook
  include_tasks: "{{ app.value.post_finalize_hook }}"
  when: app.value.post_finalize_hook is defined
